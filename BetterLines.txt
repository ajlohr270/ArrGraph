
with(GraphTheory):

with(ListTools):

with(ColorTools):

Help:=proc() print(`TestLines(lineset, x, debug)`, `Betterlines(m, N)`, `GraphCreator3(lineset, draw)`, `ListIsomClasses2(numlines, sizebox, samplesize)`, 
`SearchGraphs(L, numlines, sizebox, samplesize)`): end:


#####

(*
Betterlines(m, N)
m is a number of lines and N the range from which random coefficients to make the random lines will be pulled. The procedure makes lots of random lines, checks that when they are projected to the plane they give a simple arrangement, then outputs a list of lists L. It also fails if any of the lines in R^3 intersect. L[i][j] is a list containing information about the intersection of line i with the j^th line along it
 as a list with L[i][j][1]= +-1 indicating whether i is over (1) or under (-1)
and L[i][j][2] is the number of the line that is the j^th intersection along line i.
*)


Betterlines:=proc(m, N) local r, x, t,  i,k,j, flatlines, slopelines, interlist, templist, tempentry, eq, ans, debug:

debug:=false:

interlist:=[]:

r:=rand(-N..N):

flatlines:=[seq([r() + x*r(),r() + x*r(), 0], i = 1.. m)]:

slopelines:=[seq(y + [0,0,x*r()], y in flatlines)]:

#[flatlines, slopelines]:

for i from 1 to m do 

	templist:=[]:

	for j from 1 to i-1 do 

		eq:={seq(flatlines[i][k] = subs(x = t, flatlines[j][k]),k=1..2)}:

		#print(eq):

		ans:=solve(eq, {x, t}):

		if ans=NULL then 
			if debug then 
				print(`parallel`):
			fi:
			return(FAIL):
		fi:

	
		tempentry:=[subs(ans, x)]:

		

		tempentry:=[op(tempentry), j]:

		if subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])) = 0 then
			if debug then 
				print(`same z value`, lineset[i], lineset[j]):
			fi: 
			return(FAIL):
		fi:

		tempentry:=[op(tempentry), sign(subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])))]:


		templist:=[op(templist), tempentry]:

	od:

	for j from i+1 to m do 
	
		eq:={seq(flatlines[i][k] = subs(x = t, flatlines[j][k]),k=1..2)}:

	
		ans:=solve(eq, {x, t}):


		if ans=NULL then 

			if debug then 
				print(`parallel`):
			fi:
			return(FAIL):
		fi:


		tempentry:=[subs(ans, x)]:
		
		
		tempentry:=[op(tempentry), j]:

		if subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])) = 0 then
			if debug then 
				print(`same z value`, lineset[i], lineset[j]):
			fi: 
			return(FAIL):
		fi:

		tempentry:=[op(tempentry), sign(subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])))]:

		templist:=[op(templist), tempentry]:

	od:
if nops({seq(y[1], y in templist)}) <> m-1 then 

	if debug then 
				print(`triple`):
			fi:
	return(FAIL):
fi:

templist:=sort(templist, (x,y)->x[1]<y[1]):

templist:=[seq([y[2], y[3]], y in templist)]:

interlist:=[op(interlist), templist]:

od:


end:


(*TestLines(lineset, x, debug)
lineset is a set of lines parametrized by x. It checks that when they are projected to the plane they give a simple arrangement, then outputs a list of lists L. It also fails if any of the lines intersect in R^3. L[i][j] is a list containing information about the intersection of line i with the j^th line along it
 as a list with L[i][j][1]= +-1 indicating whether i is over (1) or under (-1)
and L[i][j][2] is the number of the line that is the j^th intersection along line i.
*)


### 

TestLines:=proc(lineset, x, debug) local r, t,  i,k,j, flatlines, slopelines, interlist, templist, tempentry, eq, ans, m:
interlist:=[]:
flatlines:=[seq([i[1],i[2], 0], i in lineset)]:
slopelines:=lineset:
#[flatlines, slopelines]:
m:=nops(lineset):
for i from 1 to m do 
	templist:=[]:
	for j from 1 to i-1 do 
		eq:={seq(flatlines[i][k] = subs(x = t, flatlines[j][k]),k=1..2)}:

		#print(eq):

		ans:=solve(eq, {x, t}):

		if ans=NULL then 
			if debug then 
				print(`parallel`):
			fi:
			return(FAIL):
		fi:

	
		tempentry:=[subs(ans, x)]:

		

		tempentry:=[op(tempentry), j]:

		if subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])) = 0 then
			if debug then 
				print(`same z value`, lineset[i], lineset[j]):
			fi: 
			return(FAIL):
		fi:

		tempentry:=[op(tempentry), sign(subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])))]:


		templist:=[op(templist), tempentry]:

	od:

	for j from i+1 to m do 
	
		eq:={seq(flatlines[i][k] = subs(x = t, flatlines[j][k]),k=1..2)}:

	
		ans:=solve(eq, {x, t}):


		if ans=NULL then 

			if debug then 
				print(`parallel`):
			fi:
			return(FAIL):
		fi:


		tempentry:=[subs(ans, x)]:
		
		
		tempentry:=[op(tempentry), j]:

		if subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])) = 0 then
			if debug then 
				print(`same z value`, lineset[i], lineset[j]):
			fi: 
			return(FAIL):
		fi:

		tempentry:=[op(tempentry), sign(subs(ans, slopelines[i][3]- subs(x = t, slopelines[j][3])))]:

		templist:=[op(templist), tempentry]:

	od:
if nops({seq(y[1], y in templist)}) <> m-1 then 

	if debug then 
				print(`triple`):
			fi:
	return(FAIL):
fi:

templist:=sort(templist, (x,y)->x[1]<y[1]):

templist:=[seq([y[2], y[3]], y in templist)]:

interlist:=[op(interlist), templist]:

od:


end:




#### 



(*
GraphCreator3(lineset, draw)
lineset is a list of lists in the form of the output of BetterLines, and draw is a \pm 1 variable that indicates  whether the graph will be drawn afterwards. The output is the directed graph D(L) as described in arrcross.pdf in the maple directed graph format.
*)

GraphCreator3:=proc(lineset, draw) local edgeset, i, j, co , line, colorlist, colortrail, G, r, n, undiredges, P:

edgeset:={}:

co:=0:

colorlist:={}:

for line in lineset do 

	

	i:= Search(line, lineset):

	colortrail:={}:

	for j from 1 to nops(line)-1 do 

		
		
		if line[j][2] = 1 then
			colortrail:=colortrail union {[convert(mi(co), name), 
			convert({i, line[j][1]}, name)]}:

			

		else
			colortrail:=colortrail union {[convert({i, line[j][1]},					name),convert(mi(co), name)]}:

		fi:

		if line[j+1][2] = 1 then
			colortrail:=colortrail union {[convert(mi(co), name), 
			convert({i, line[j+1][1]}, name)]}:

		else
			colortrail:=colortrail union {[convert({i, line[j+1][1]},					name),convert(mi(co), name)]}:

		fi:

		co:=co+1:

		

	od:

	edgeset:=edgeset union colortrail:

	colorlist:={op(colorlist), colortrail}:

	
od:

G:=Digraph(edgeset):

#print(colorlist):

if draw=1 then 

n:=nops(lineset):

r:=rand(0..n):

	for j in colorlist do 

	HighlightEdges(G, j, COLOR(RGB, r()/n, r()/n, r()/n)):

	od:

fi:


G:
#undiredges:={seq({op(y)}, y in edgeset)}:
	#print(undiredges):
	#P:=Graph(undiredges):
end:

#
#####
(*
ListIsomClasses2(numlines, sizebox, samplesize)
numlines is the number of lines (m from before), sizebox is the size of the coefficients in the lines, and samplesize is how many random samples to generate. 
The output is a list of all nonisomorphic directed graphs created by GraphCreator3 on a random sample of samplesize number of lines.
*)

ListIsomClasses2:=proc(numlines, sizebox, samplesize) local lineset, graphlist, graph, g, addtolist, i, j:
graphlist:=[]:
i:=1:
while i <= samplesize do 
lineset:=FAIL:
	while lineset = FAIL do 
		lineset:=Betterlines(numlines,sizebox):
	od:
addtolist:=true:
graph:=GraphCreator3(lineset, 1):
#print(lineset):
j:=1:
while addtolist and j<=nops(graphlist) do 
	addtolist:=not(IsIsomorphic(graphlist[j], graph)):
#	print(IsIsomorphic(graphlist[j], graph)):
	j:=j+1:
od: 
if addtolist then 
	graphlist:=[op(graphlist), graph]:
fi:
i:=i+1:
od:
#print(i,j):
graphlist:
end:


####  

(*
SearchGraphs(L, numlines, sizebox, samplesize)
L is a list of graphs, and the other variables are as before. Outputs the first graph in L that we find in the output of ListIsomClasses2(numlines, sizebox, samplesize).
*)

SearchGraphs:=proc(L, numlines, sizebox, samplesize) local lineset, graphlist, graph, g, addtolist, i, j, l:
i:=1:
while i <= samplesize do 
lineset:=FAIL:
	while lineset = FAIL do 
		lineset:=Betterlines(numlines,sizebox, samplesize):
	od:
graph:=GraphCreator3(lineset, 1):
#print(lineset):
j:=1:
for l in L do 
	if IsIsomorphic(l, graph) then 
		return(l):
	fi:
od:
i:=i+1:
od:
FAIL:
end:

(*
ListGraphs(numlines)
numlines is a number of lines. procedurally lists all the graphs that we think can be achieved so that we can check that they actually can
#currently only works for 4, because don't have a way of listing all (unlabeled) arrangement graphs
ListGraphs:=proc(numlines) local numvertices,arrangementgraphs,crossverts,midverts,edges,v,e:
numvertices := numlines *(numlines +1)/2:
arrgraphs := [[{1,2,3,4,5,6},{[1,2],[2,3],[3,4],[4,5],[5,6],[6,4],[6,1],[2,4]}]]:
overunder := [0(,0$(nops(arrangementgraphs[1])-1)]:
graphs:=[]:
for g in arrgraphs do
keepgoing2:= true:
i:=1:
while keepgoing2 do
graphs:=[op(graphs),[

keepgoing:=true:
while keepgoing and i<=nops(overunder) do
if (overunder[i] = 0) then
overunder[i] :=1:
keepgoing := false:
for j from 1 to i-1 do
overunder[j]=0:
od:
fi:
i:=i+1:
if i= nops(overunder)+1 then
keepgoing2:=false:
od:
od:
od:
graphs:
end:
*)

(*
ListAllGraphs(numlines,samplesize,sizebox,randsample) first generates samplesize many arrangement graphs on numlines many lines.
 It then randomly relables the crossing information at every crossing. Then, it rejects any graphs that appeared as valid graphs generated before.
 it attempts to return randsample many such graphs, and eventually times out if it fails, and returns fewer.
 its purpose is to try and find labellings of arrangement graphs.
*)

ListAllGraphs:=proc(numlines,samplesize,sizebox,randsample) local lineset, graphlist, graph, g, addtolist, i, j,k,l,timeout, r, Graphs, AssignPair:
graphlist:=[]:
i:=1:
r:=rand(0..1):
Graphs := ListIsomClasses2(numlines,samplesize,sizebox):
timeout:=1:
while (i <= randsample) and (timeout <=randsample*10)do 
lineset:=FAIL:
	while lineset = FAIL do 
		lineset:=Betterlines(numlines,sizebox):
	od:
AssignPair := {}:
for j from 1 to nops(lineset) do
for k from 1 to nops(lineset[j]) do
if(not member({lineset[j][k][1],j},AssignPair)) then
lineset[j][k][2] := (-1)^(r()):
for l from 1 to nops(lineset[lineset[j][k][1]]) do
if lineset[lineset[j][k][1]][l][1] = j then
lineset[lineset[j][k][1]][l][2] := (-1)* lineset[j][k][2]:
fi:
od:
AssignPair := {op(AssignPair),{j,lineset[j][k][1]}}:
fi:
od:
od:

addtolist:=true:
graph:=GraphCreator3(lineset, 1):
#print(lineset):
j:=1:
while addtolist and j<=nops(graphlist) do 
	addtolist:=not(IsIsomorphic(graphlist[j], graph)):
#	print(IsIsomorphic(graphlist[j], graph)):
	j:=j+1:
od: 
for j from 1 while (j<=nops(Graphs) and addtolist) do
	addtolist:=not(IsIsomorphic(Graphs[j], graph)):
#	print(IsIsomorphic(graphlist[j], graph)):
#	j:=j+1:
od: 
if addtolist then 
	graphlist:=[op(graphlist), graph]:
i:=i+1
fi:
timeout:=timeout+1:
od:
#print(i,j):
graphlist:
end:

